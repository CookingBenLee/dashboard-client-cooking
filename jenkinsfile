#!groovy
pipeline {
  agent any

  environment {
    // üîê Identifiant Jenkins pour Docker Hub (Stock√© dans Credentials)
    DOCKERHUB_CREDENTIALS = credentials('c894b9cc-d9e6-491e-b00c-648867047d17')

    // üè∑Ô∏è Nom et tag de l‚Äôimage
    IMAGE_NAME = "cookingbenlee/client-dashboard-cooking-ben"
    IMAGE_TAG = "mod-partage-recettes"

    // üìÅ Dossier temporaire de build
    BUILD_DIR = "."

    // ‚è±Ô∏è Permet d‚Äôajouter un timestamp dans le tag (optionnel)
    BUILD_TIMESTAMP = new Date().format("yyyyMMdd-HHmmss", TimeZone.getTimeZone("UTC"))
  }

  options {
    // ‚è≥ Limite la dur√©e maximale du build √† 30 minutes
    timeout(time: 30, unit: 'MINUTES')

    // üí¨ Affiche le timestamp sur chaque ligne des logs
    timestamps()

    // üì¶ Ne garde que les 10 derniers builds
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }

  stages {

    stage('Checkout Code') {
      steps {
        echo "üì¶ R√©cup√©ration du code source depuis le d√©p√¥t Git..."
        checkout scm
      }
    }

    stage('Docker Build') {
      steps {
        script {
          echo "üèóÔ∏è Construction de l‚Äôimage Docker : ${IMAGE_NAME}:${IMAGE_TAG}"
          sh """
            docker build \
              -t ${IMAGE_NAME}:${IMAGE_TAG} \
              -t ${IMAGE_NAME}:${IMAGE_TAG}-${BUILD_TIMESTAMP} \
              ${BUILD_DIR}
          """
        }
      }
    }

    stage('Docker Login') {
      steps {
        echo "üîê Connexion √† Docker Hub..."
        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
      }
    }

    stage('Docker Push') {
      steps {
        script {
          echo "üöÄ Envoi de l‚Äôimage vers Docker Hub..."
          sh """
            docker push ${IMAGE_NAME}:${IMAGE_TAG}
            docker push ${IMAGE_NAME}:${IMAGE_TAG}-${BUILD_TIMESTAMP}
          """
        }
      }
    }
  }

  post {
    always {
      echo "üßπ Nettoyage local apr√®s build..."
      sh 'docker logout'
      sh """
        docker image rm ${IMAGE_NAME}:${IMAGE_TAG} || true
        docker image rm ${IMAGE_NAME}:${IMAGE_TAG}-${BUILD_TIMESTAMP} || true
      """
    }

    success {
      echo "‚úÖ Build et push r√©ussis pour ${IMAGE_NAME}:${IMAGE_TAG}"
    }

    failure {
      echo "‚ùå Le pipeline a √©chou√©."
    }
  }
}
